import re


def get_n1(component_def):
   
    match = re.search(r'n1\s*=\s*(\d+)', component_def)
    if match:
        return int(match.group(1))
    else:
        return -1


def get_n2(component_def):
   
    match = re.search(r'n2\s*=\s*(\d+)', component_def)
    if match:
        return int(match.group(1))
    else:
        return -1


def cascaded_circuit(file):
    n_lines = len(file)


    # Looking for the beginning and end of the circuit block, raising errors if
    # they are not found
    for i in range(n_lines):
        if "<CIRCUIT>" in file[i][0:9]: # is "<CIRCUIT>" in line i characters 0-8?
            CIRCUIT_start = i+1         # if it is: the next line is the start of 
            break                       # the terms block
        else:
            CIRCUIT_start = -1
        
    if (CIRCUIT_start == -1):
        raise Exception("Start of CIRCUIT block not found.")

    for i in range(n_lines):
        if "</CIRCUIT>" in file[i][0:10]:
            CIRCUIT_end = i-1
            break
        else:
            CIRCUIT_end = -1
    
    if (CIRCUIT_end == -1):
        raise Exception("End of CIRCUIT block not found.")

    # Retrieve just the CIRCUIT block
    CIRCUIT_block = file[CIRCUIT_start:CIRCUIT_end]

    # Place component definitions in either 'series' or 'parallel' arrays
    series = []
    parallel = []
    for i in range(len(CIRCUIT_block)):
        node1 = get_n1(CIRCUIT_block[i])
        node2 = get_n2(CIRCUIT_block[i])
        #find out if there is a component definition in that line
        
        print(node1,node2)

        if node1 == -1 | node2 == -1:
            ignore = 1
        else:
            ignore = 0

        if (node1 != 0) & (node2 !=0) & (ignore == 0):
            series.append(CIRCUIT_block[i])
        elif ((node1 == 0) | (node2 == 0)) & (ignore == 0):
            parallel.append(CIRCUIT_block[i])

    # sort the series array 
    




net_file    = open('D:\\Code\\EE20084\\EE20084\\input_files\\a_Test_Circuit_1.net','rt')
file        = net_file.readlines()

cascaded_circuit(file)